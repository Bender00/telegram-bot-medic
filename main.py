# - *- coding: utf- 8 - *-
import config
import logging
import random
import sys
from importlib import reload
reload(sys)
from aiogram import Bot, Dispatcher, executor, types
from sqlighter import SQLighter



# –∑–∞–¥–∞–µ–º —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç–∞
bot = Bot(token=config.API_TOKEN)
dp = Dispatcher(bot)

# –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î
db = SQLighter('db.db')

# –≤—ñ–¥–∫—Ä–∏—Ç—Ç—è —Ñ–∞–π–ª—É —Ç–∞ —Ä–∞–Ω–¥–æ–º–Ω–µ –≤–∏–±—Ä–∞–Ω–Ω—è
def parse_text_db():
	with open('test/endokrynka/' + str(random.randint(1, 90)) + '.txt', mode='r', encoding='utf-8') as f:
		homework = f.read()
	return homework
# –ö–æ–º–∞–Ω–¥–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
@dp.message_handler(commands=['subscribe'])
async def subscribe(message: types.Message):
	if(not db.subscriber_exists(message.from_user.id)):
		# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
		db.add_subscriber(message.from_user.id)
	else:
		# –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
		db.update_subscription(message.from_user.id, True)
	
	await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!\n–ñ–¥–∏—Ç–µ, —Å–∫–æ—Ä–æ –≤—ã–π–¥—É—Ç –Ω–æ–≤—ã–µ –æ–±–∑–æ—Ä—ã –∏ –≤—ã —É–∑–Ω–∞–µ—Ç–µ –æ –Ω–∏—Ö –ø–µ—Ä–≤—ã–º–∏ =)")

# –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–ø–∏—Å–∫–∏
@dp.message_handler(commands=['unsubscribe'])
async def unsubscribe(message: types.Message):
	if(not db.subscriber_exists(message.from_user.id)):
		# –µ—Å–ª–∏ —é–∑–µ—Ä–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ —Å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–æ–π (–∑–∞–ø–æ–º–∏–Ω–∞–µ–º)
		db.add_subscriber(message.from_user.id, False)
		await message.answer("–í—ã –∏—Ç–∞–∫ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
        
	else:
		# –µ—Å–ª–∏ –æ–Ω —É–∂–µ –µ—Å—Ç—å, —Ç–æ –ø—Ä–æ—Å—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ–º –µ–º—É —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏
		db.update_subscription(message.from_user.id, False)
		await message.answer("–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø–∏—Å–∞–Ω—ã –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")

# keyboard
item1 = types.KeyboardButton('üé≤ –†–∞–Ω–¥–æ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è')

markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
markup.add(item1)

# –¥–æ–±–∞–≤–ª—è—î–º–æ –∫–Ω–æ–ø–∫–∏
@dp.message_handler(commands=['start'])
async def process_start_command(message: types.Message):
    await message.reply("–ü—Ä–∏–≤–µ—Ç!", reply_markup=markup)

# –ö–Ω–æ–ø–∫–∞ " –†–∞–Ω–¥–æ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è"
@dp.message_handler(lambda message: message.text == "üé≤ –†–∞–Ω–¥–æ–º–Ω–µ –ø–∏—Ç–∞–Ω–Ω—è")
async def random_btn(message: types.Message):
    await message.answer(parse_text_db(), parse_mode='html')

# –∑–∞–ø—É—Å–∫–∞–µ–º –ª–æ–Ω–≥ –ø–æ–ª–ª–∏–Ω–≥
if __name__ == '__main__':
	executor.start_polling(dp, skip_updates=True)